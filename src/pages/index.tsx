import Head from "next/head";
import { Geist } from "next/font/google";
import { useState } from "react";
import {
  Container,
  Box,
  Typography,
  TextField,
  Button,
  Paper,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  LinearProgress,
} from "@mui/material";
import AutoGraphIcon from "@mui/icons-material/AutoGraph";
import PsychologyIcon from "@mui/icons-material/Psychology";
import PersonIcon from "@mui/icons-material/Person";

interface DetectionResult {
  aiWords: number;
  fakePercentage: number;
  isHuman: number;
  otherFeedback: string | null;
  sentences: string[];
  status: boolean;
  textWords: number;
}

const geist = Geist({
  subsets: ["latin"],
});

export default function Home() {
  const [text, setText] = useState("");
  const [result, setResult] = useState<DetectionResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const detectContent = async () => {
    if (!text.trim()) {
      setError("Please enter some text to analyze");
      return;
    }

    setLoading(true);
    setError("");

    try {
      const response = await fetch("/api/detect", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ text }),
      });

      const data = await response.json();
      setResult(data);
    } catch (err) {
      setError("An error occurred while analyzing the text");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>AI Content Detector</title>
        <meta name="description" content="Detect if content is AI-generated" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        className={geist.className}
        sx={{
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
          py: { xs: 2, sm: 4 },
        }}
      >
        <Container maxWidth="md">
          <Box sx={{ textAlign: "center", mb: { xs: 3, sm: 4 } }}>
            <Typography
              variant="h1"
              sx={{
                background: "linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",
                WebkitBackgroundClip: "text",
                WebkitTextFillColor: "transparent",
                mb: 2,
                fontSize: { xs: "2.5rem", sm: "3rem", md: "3.5rem" },
              }}
            >
              AI Content Detector
            </Typography>
            <Typography
              variant="h6"
              color="text.secondary"
              sx={{
                mb: 4,
                fontSize: { xs: "1rem", sm: "1.25rem" },
                px: { xs: 2, sm: 0 },
              }}
            >
              Enter text to detect if it was generated by AI
            </Typography>
          </Box>

          <Paper
            elevation={3}
            sx={{
              p: { xs: 2, sm: 4 },
              mb: 3,
              mx: { xs: 1, sm: 0 },
            }}
          >
            <TextField
              fullWidth
              multiline
              rows={4}
              variant="outlined"
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Enter text to analyze..."
              sx={{
                mb: 3,
                "& .MuiOutlinedInput-root": {
                  fontSize: { xs: "0.9rem", sm: "1rem" },
                },
              }}
            />
            <Box sx={{ display: "flex", justifyContent: "center" }}>
              <Button
                variant="contained"
                onClick={detectContent}
                disabled={loading}
                startIcon={
                  loading ? (
                    <CircularProgress size={20} color="inherit" />
                  ) : null
                }
                sx={{
                  width: { xs: "100%", sm: "auto" },
                  py: { xs: 1.5, sm: 1 },
                }}
              >
                {loading ? "Analyzing..." : "Detect Content"}
              </Button>
            </Box>
          </Paper>

          {error && (
            <Alert severity="error" sx={{ mb: 3, mx: { xs: 1, sm: 0 } }}>
              {error}
            </Alert>
          )}

          {result && (
            <Paper
              elevation={3}
              sx={{
                p: { xs: 2, sm: 4 },
                mx: { xs: 1, sm: 0 },
              }}
            >
              <Typography
                variant="h4"
                gutterBottom
                sx={{
                  mb: 3,
                  fontSize: { xs: "1.5rem", sm: "2rem" },
                }}
              >
                Analysis Result
              </Typography>
              <Box
                sx={{
                  display: "flex",
                  flexDirection: { xs: "column", sm: "row" },
                  gap: { xs: 2, sm: 3 },
                  mb: 4,
                }}
              >
                <Card sx={{ flex: 1 }}>
                  <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
                    <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                      <PsychologyIcon
                        color="primary"
                        sx={{ mr: 1, fontSize: { xs: "1.5rem", sm: "2rem" } }}
                      />
                      <Typography
                        variant="h6"
                        sx={{ fontSize: { xs: "1rem", sm: "1.25rem" } }}
                      >
                        AI Words
                      </Typography>
                    </Box>
                    <Typography
                      variant="h4"
                      sx={{ fontSize: { xs: "1.75rem", sm: "2.5rem" } }}
                    >
                      {result.aiWords}
                    </Typography>
                  </CardContent>
                </Card>
                <Card sx={{ flex: 1 }}>
                  <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
                    <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                      <AutoGraphIcon
                        color="primary"
                        sx={{ mr: 1, fontSize: { xs: "1.5rem", sm: "2rem" } }}
                      />
                      <Typography
                        variant="h6"
                        sx={{ fontSize: { xs: "1rem", sm: "1.25rem" } }}
                      >
                        Total Words
                      </Typography>
                    </Box>
                    <Typography
                      variant="h4"
                      sx={{ fontSize: { xs: "1.75rem", sm: "2.5rem" } }}
                    >
                      {result.textWords}
                    </Typography>
                  </CardContent>
                </Card>
                <Card sx={{ flex: 1 }}>
                  <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
                    <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                      <PersonIcon
                        color="primary"
                        sx={{ mr: 1, fontSize: { xs: "1.5rem", sm: "2rem" } }}
                      />
                      <Typography
                        variant="h6"
                        sx={{ fontSize: { xs: "1rem", sm: "1.25rem" } }}
                      >
                        Human Probability
                      </Typography>
                    </Box>
                    <Typography
                      variant="h4"
                      sx={{ fontSize: { xs: "1.75rem", sm: "2.5rem" } }}
                    >
                      {result.isHuman.toFixed(1)}%
                    </Typography>
                  </CardContent>
                </Card>
              </Box>

              <Box sx={{ mt: 4 }}>
                <Typography
                  variant="h6"
                  gutterBottom
                  sx={{ fontSize: { xs: "1rem", sm: "1.25rem" } }}
                >
                  AI Generation Probability
                </Typography>
                <LinearProgress
                  variant="determinate"
                  value={result.fakePercentage}
                  sx={{ mb: 2, height: { xs: 8, sm: 10 } }}
                />
                <Typography
                  variant="h4"
                  sx={{
                    color:
                      result.fakePercentage > 50
                        ? "error.main"
                        : "success.main",
                    fontWeight: "bold",
                    textAlign: "center",
                    fontSize: { xs: "1.5rem", sm: "2rem" },
                  }}
                >
                  {result.fakePercentage > 50
                    ? "Likely AI Generated"
                    : "Likely Human Written"}
                </Typography>
              </Box>

              {result.otherFeedback && (
                <Alert severity="info" sx={{ mt: 3, mx: { xs: 1, sm: 0 } }}>
                  {result.otherFeedback}
                </Alert>
              )}
            </Paper>
          )}
        </Container>
      </Box>
    </>
  );
}
