import Head from "next/head";
import { Geist } from "next/font/google";
import { useState } from "react";
import {
  Container,
  Box,
  Typography,
  TextField,
  Button,
  Paper,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  LinearProgress,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import AutoGraphIcon from "@mui/icons-material/AutoGraph";
import PsychologyIcon from "@mui/icons-material/Psychology";
import PersonIcon from "@mui/icons-material/Person";

interface DetectionResult {
  aiWords: number;
  fakePercentage: number;
  isHuman: number;
  otherFeedback: string | null;
  sentences: string[];
  status: boolean;
  textWords: number;
}

const geist = Geist({
  subsets: ["latin"],
});

const StyledPaper = styled(Paper)({
  padding: "32px",
  marginTop: "32px",
  background: "rgba(255, 255, 255, 0.9)",
  backdropFilter: "blur(10px)",
  borderRadius: "16px",
  boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1)",
});

const StyledTextField = styled(TextField)({
  "& .MuiOutlinedInput-root": {
    borderRadius: "12px",
    backgroundColor: "rgba(255, 255, 255, 0.8)",
  },
});

const StyledButton = styled(Button)({
  borderRadius: "12px",
  padding: "12px 24px",
  textTransform: "none",
  fontWeight: 600,
  fontSize: "1rem",
  background: "linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",
  "&:hover": {
    background: "linear-gradient(45deg, #1976D2 30%, #1CB5E0 90%)",
  },
});

export default function Home() {
  const [text, setText] = useState("");
  const [result, setResult] = useState<DetectionResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const detectContent = async () => {
    if (!text.trim()) {
      setError("Please enter some text to analyze");
      return;
    }

    setLoading(true);
    setError("");

    try {
      const response = await fetch("/api/detect", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ text }),
      });

      const data = await response.json();
      setResult(data);
    } catch (err) {
      setError("An error occurred while analyzing the text");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>AI Content Detector</title>
        <meta name="description" content="Detect if content is AI-generated" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        className={geist.className}
        sx={{
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
          py: 4,
        }}
      >
        <Container maxWidth="md">
          <Box sx={{ textAlign: "center", mb: 4 }}>
            <Typography
              variant="h2"
              component="h1"
              sx={{
                fontWeight: 700,
                background: "linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",
                WebkitBackgroundClip: "text",
                WebkitTextFillColor: "transparent",
                mb: 2,
              }}
            >
              AI Content Detector
            </Typography>
            <Typography variant="h6" color="text.secondary" sx={{ mb: 4 }}>
              Enter text to detect if it was generated by AI
            </Typography>
          </Box>

          <StyledPaper elevation={3}>
            <StyledTextField
              fullWidth
              multiline
              rows={6}
              variant="outlined"
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Enter text to analyze..."
              sx={{ mb: 3 }}
            />
            <Box sx={{ display: "flex", justifyContent: "center" }}>
              <StyledButton
                variant="contained"
                onClick={detectContent}
                disabled={loading}
                startIcon={
                  loading ? (
                    <CircularProgress size={20} color="inherit" />
                  ) : null
                }
              >
                {loading ? "Analyzing..." : "Detect Content"}
              </StyledButton>
            </Box>
          </StyledPaper>

          {error && (
            <Alert severity="error" sx={{ mt: 2 }}>
              {error}
            </Alert>
          )}

          {result && (
            <StyledPaper elevation={3}>
              <Typography variant="h4" gutterBottom sx={{ mb: 3 }}>
                Analysis Result
              </Typography>
              <Box
                sx={{
                  display: "grid",
                  gridTemplateColumns: {
                    xs: "1fr",
                    md: "repeat(3, 1fr)",
                  },
                  gap: 3,
                }}
              >
                <Card sx={{ height: "100%" }}>
                  <CardContent>
                    <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                      <PsychologyIcon color="primary" sx={{ mr: 1 }} />
                      <Typography variant="h6">AI Words</Typography>
                    </Box>
                    <Typography variant="h4">{result.aiWords}</Typography>
                  </CardContent>
                </Card>
                <Card sx={{ height: "100%" }}>
                  <CardContent>
                    <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                      <AutoGraphIcon color="primary" sx={{ mr: 1 }} />
                      <Typography variant="h6">Total Words</Typography>
                    </Box>
                    <Typography variant="h4">{result.textWords}</Typography>
                  </CardContent>
                </Card>
                <Card sx={{ height: "100%" }}>
                  <CardContent>
                    <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                      <PersonIcon color="primary" sx={{ mr: 1 }} />
                      <Typography variant="h6">Human Probability</Typography>
                    </Box>
                    <Typography variant="h4">
                      {result.isHuman.toFixed(1)}%
                    </Typography>
                  </CardContent>
                </Card>
              </Box>

              <Box sx={{ mt: 4 }}>
                <Typography variant="h6" gutterBottom>
                  AI Generation Probability
                </Typography>
                <LinearProgress
                  variant="determinate"
                  value={result.fakePercentage}
                  sx={{
                    height: 10,
                    borderRadius: 5,
                    backgroundColor: "rgba(33, 150, 243, 0.1)",
                    "& .MuiLinearProgress-bar": {
                      borderRadius: 5,
                      background:
                        "linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",
                    },
                  }}
                />
                <Typography
                  variant="h4"
                  sx={{
                    mt: 2,
                    color:
                      result.fakePercentage > 50
                        ? "error.main"
                        : "success.main",
                    fontWeight: "bold",
                  }}
                >
                  {result.fakePercentage > 50
                    ? "Likely AI Generated"
                    : "Likely Human Written"}
                </Typography>
              </Box>

              {result.otherFeedback && (
                <Alert severity="info" sx={{ mt: 3 }}>
                  {result.otherFeedback}
                </Alert>
              )}
            </StyledPaper>
          )}
        </Container>
      </Box>
    </>
  );
}
